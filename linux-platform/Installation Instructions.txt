################################# Create folder structure [Start] ################################

  # Create a directory named 'alfresco-community62ga' under '/usr/local/' directory. We will setup everything here.
    
    $ sudo mkdir /usr/local/alfresco-community62ga
    
    # Create sub-directories as below:

       alfresco-community62ga/
		├── activemq
		├── alf_data
		│   ├── keystore
		├── alfresco-pdf-renderer
		├── amps
		├── amps_share
		├── bin
		├── imagemagick
		├── libreoffice
		├── licenses
		├── modules
		│   ├── platform
		│   └── share
		└── tomcat
		    └── shared
			├── classes
			└── lib


################################# Create folder structure [End] ################################



################################# Create user and group [Start] ################################

  # Create a group named 'Alfresco' 

  # Create a nologin user named 'alfresco'


  # We will be using this user/group at later stages of setup to setup appropriate permission levels.

################################# Create user and group [End] ##################################


################################# Installing Java 11 [Start] ###################################

	# Update packages, its a best practice to start with an updated operating system before installing a package. 
        # If you have not done so, use the following command to update CentOS and reboot:
		$ sudo yum update -y
                $ sudo reboot

	# Install latest stable version of Java11
		$ sudo yum install java-11-openjdk-devel

	This will install java11 in following directory: /usr/lib/jvm/java-11

        # Run following command to check what is the default java version 
               $ java -version

          If you see java version other than java-11, you can switch and set the default version as java-11
          #Run the following command:
            $ sudo alternatives --config java

            This will prompt you to select the version you want to set as default. Select a number from the list, e.g. if java-11 is at number 3, then type '3' and press enter.
            Revalidate the java version using below command to make sure default version is set to java-11:
            
            $ java -version

	# set JAVA_HOME environment variable.
		export JAVA_HOME=/usr/lib/jvm/java-11

	    Note that above environment variable gets reset after you re-start the server. To keep the variable permanent update ".bashsrc" 

		$sudo vim .bashrc
		
		# .bashrc

		# Source global definitions
		if [ -f /etc/bashrc ]; then
			. /etc/bashrc
		fi

		# Uncomment the following line if you don't like systemctl's auto-paging feature:
		# export SYSTEMD_PAGER=
		export JAVA_HOME=/usr/lib/jvm/java-11


		# User specific aliases and functions
	
################################# Installing Java 11 [End] ########################################

################################# Installing Postgres 11.10 [Start] ###############################

   # Update packages, its a best practice to start with an updated operating system before installing a package. 
   # If you have not done so, use the following command to update CentOS and reboot:
	$ sudo yum update -y
        $ sudo reboot
      
   # Configure Yum Repo
     
        $ sudo rpm -Uvh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
   
   # Install PostgreSQL Server and Client

        $ sudo yum install postgresql11-server postgresql11 -y

   # Initialize Database

        $ sudo /usr/pgsql-11/bin/postgresql-11-setup initdb

        The default directory where PostgreSQL data storage is: /var/lib/pgsql/11/data

   # Enable and Start PostgreSQL Service
       
        $ sudo systemctl enable postgresql-11.service
        $ sudo systemctl start postgresql-11.service

   # Configure Firewall for remote access

        $ sudo firewall-cmd --add-service=postgresql --permanent
        $ sudo firewall-cmd --reload

   # Enable Remote Access so users can connect to postgresql server, edit 'postgresql.conf'. 
   # Visit here for more details: https://www.postgresql.org/docs/11/runtime-config-connection.html

        # Change the listen_address to * in the configuration file:
        
        $ sudo vim /var/lib/pgsql/11/data/postgresql.conf
        
          listen_addresses = '*'

'listen_addresses' Specifies the TCP/IP address(es) on which the server is to listen for connections from client applications. The value takes the form of a comma-separated list of host names and/or numeric IP addresses. The special entry * corresponds to all available IP interfaces. The entry 0.0.0.0 allows listening for all IPv4 addresses and :: allows listening for all IPv6 addresses. If the list is empty, the server does not listen on any IP interface at all, in which case only Unix-domain sockets can be used to connect to it. 
          
          # Uncomment following:

          port = 5432

The TCP port the server listens on; 5432 by default. Note that the same port number is used for all IP addresses the server listens on. This parameter can only be set at server start.


        # We need to also let PostgreSQL know to accept remote connections, edit pg_hba.conf add the following:

        $ sudo vim /var/lib/pgsql/11/data/pg_hba.conf

          # TYPE  DATABASE        USER            ADDRESS                 METHOD   
          # Accept from anywhere
	  host    all             all              0.0.0.0/0              md5
	  host    all             all              ::/0                   md5

          # Comment out all other configurations that use 'ident' as method to avoid error like: FATAL:  Ident authentication failed for user "..."
          #host    all             all             127.0.0.1/32            ident
	  #host    all             all             ::1/128                 ident
	  #host    replication     all             127.0.0.1/32            ident
	  #host    replication     all             ::1/128                 ident

        # Restart service after making configuration changes:

        $ sudo systemctl restart postgresql-11.service


   # Set PostgreSQL Admin Password
        
        $ sudo su - postgres
	
          # type psql to launch postgresql terminal
          -bash-4.2$ psql

          # Run below given query to set the password.
          postgres=# alter user postgres with password 'alfresco';
    
          # Type exit to terminate the terminal
          exit

          # Type exit to leave the bash terminal 
          exit

Note: Make sure port 5432 is open and not already in use. Port 5432 is default for postgres to get db connection. If you have this port already in use, make sure you select a different port and use the same while configuring alfresco-global.properties.

  # Install pgAdmin Tool (A management and development tool for PostgreSQL server. We will install pgadmin4)

        $ sudo yum install pgadmin4 -y


 # Start and enable httpd service to start on boot

        $ sudo systemctl start httpd && sudo systemctl enable httpd

        # You can confirm service status by running:

        $ sudo systemctl status httpd
 

# Enable pgAdmin Apache Configuration

        $ sudo cp /etc/httpd/conf.d/pgadmin4.conf.sample /etc/httpd/conf.d/pgadmin4.conf

 # Configure VirtualHost
     
      $ sudo vim /etc/httpd/conf.d/pgadmin4.conf

      # Edit the Apache configuration file to add a VirtualHost as appears below:

        <VirtualHost *:80>
	ServerName pgadmin.alfresco.com
	LoadModule wsgi_module modules/pgadmin4-python3-mod_wsgi.so
	WSGIDaemonProcess pgadmin processes=1 threads=25
	WSGIScriptAlias /pgadmin4 /usr/lib/python3.6/site-packages/pgadmin4-web/pgAdmin4.wsgi

	<Directory /usr/lib/python3.6/site-packages/pgadmin4-web/>
		WSGIProcessGroup pgadmin
		WSGIApplicationGroup %{GLOBAL}
		<IfModule mod_authz_core.c>
		        # Apache 2.4
		        Require all granted
		</IfModule>
		<IfModule !mod_authz_core.c>
		        # Apache 2.2
		        Order Deny,Allow
		        Deny from All
		        Allow from 127.0.0.1
		        Allow from ::1
		</IfModule>
	</Directory>
	</VirtualHost>

       # Confirm the above edit and syntax are ok and then restart httpd:
         
          $ sudo httpd -t
          $ sudo systemctl restart httpd


 # Configure Data Directories

     # Create data directories to be used by pgAdmin4 and provide the directories in the config file:
      
        $ sudo mkdir -p /var/lib/pgadmin4/ /var/log/pgadmin4/
	$ sudo vim /usr/lib/python3.6/site-packages/pgadmin4-web/config_distro.py

	        # Add the following in config_distro.py file:

		LOG_FILE = '/var/log/pgadmin4/pgadmin4.log'
		SQLITE_PATH = '/var/lib/pgadmin4/pgadmin4.db'
		SESSION_DB_PATH = '/var/lib/pgadmin4/sessions'
		STORAGE_DIR = '/var/lib/pgadmin4/storage'

 # Run the following command to create the configuration database: 

       $ sudo python3 /usr/lib/python3.6/site-packages/pgadmin4-web/setup.py 


        Email address: admin@abhinav.com 
	Password: <INPUT PASSWORD>
	Retype password:<Confirm PASSWORD>
	pgAdmin 4 - Application Initialisation
	======================================


 # Set permissions for pgAdmin directories to apache user

      $ sudo chown -R apache:apache /var/lib/pgadmin4 /var/log/pgadmin4

 # Configure SELinux (if status is Enforced/Enforcing):

SELinux gives that extra layer of security to the resources in the system. It provides the MAC (mandatory access control) as contrary to the DAC (Discretionary access control).      SELinux can operate in any of the 3 modes :

	1. Enforced : Actions contrary to the policy are blocked and a corresponding event is logged in the audit log.
	2. Permissive : Permissive mode loads the SELinux software, but doesn’t enforce the rules, only logging is performed.
	3. Disabled : The SELinux is disabled entirely.


     # To check the status of SELinux, use following command:
       
        $ sudo getenforce 
          OR
        $ sudo sestatus

     #If status says 'Enforcing', then follow the below steps for pgAdmin4:

     # Create and apply a policy to allow Apache user access pgAdmin directories.

	$ sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/lib/pgadmin4(/.*)?"
	$ sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/log/pgadmin4(/.*)?"
	$ sudo restorecon -R /var/lib/pgadmin4/
	$ sudo restorecon -R /var/log/pgadmin4/

     # Restart httpd service.

        $ sudo systemctl restart httpd

 # Access pgAdmin 4 Web Interface, if you have an active firewall service, allow http port

	$ sudo firewall-cmd --permanent --add-service=http
	$ sudo firewall-cmd --reload

 # To launch pgadmin4 use below url (you can use server name setup as part of virtual host config above):

      http://localhost:80/pgadmin4/login?next=%2Fpgadmin4%2F


 # In case you are not able to connect from pgAdmin due to SELinux preventing the connection, then exeucte following commands and restart postgresql11
        $ sudo semanage port -a -t postgresql_port_t -p tcp 5432
        $ sudo setsebool -P httpd_can_network_connect_db 1

 
 # At last, prepare alfresco database, create user and assign previlidges
       
        $ sudo su - postgres
	
        # type psql to launch postgresql terminal
        -bash-4.2$ psql

   
        #Create user named 'alfresco' and db named 'alfresco'and make 'alfresco' the owner of 'alfresco' db.
	postgres=# create role alfresco LOGIN password 'alfresco';
	postgres=# create database alfresco encoding 'utf8';
	postgres=# grant all on database alfresco to alfresco;

	or alternatively you can use below commands:

	sudo -u postgres createuser -D -A -P alfresco
	# on promot provide the password as 'alfresco'

	#Create db and assign user alfresco as owner.
	sudo -u postgres createdb -O alfresco alfresco


################################# Installing Postgres 11.10 [End] #######################################


################################# Installing Imagemagick 7.0.10 [Start] #################################

 # Download locations:
 # Imagemagick dist: 
   https://nexus.alfresco.com/nexus/service/local/repositories/thirdparty/content/org/imagemagick/imagemagick-distribution/7.0.10-11/imagemagick-distribution-7.0.10-11-linux.rpm
 # Imagemagick lib dist:
   https://nexus.alfresco.com/nexus/service/local/repositories/thirdparty/content/org/imagemagick/imagemagick-distribution/7.0.10-11/imagemagick-distribution-7.0.10-11-libs-linux.rpm
 # Dependencies:
   https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

 # Download above packages and run following commands to install

   # Use rpm files path as per your current download location. In my case files are downloaded in 'Downloads' folder.
   $ sudo yum localinstall ./Downloads/*.rpm -y

 # Imagemagick and its dependencies will be installed and can be found in these locations:

   # Executables location:

        /usr/bin/convert
        /usr/bin/indentify
	/usr/bin/magick
	/usr/bin/magick-script 

     etc.

   # Libs location:
   
     /usr/lib64/ImageMagick-7.0.10

   # Imagemagic configuration based on above locations for alfresco would be:

        img.root=/usr/lib64/ImageMagick-7.0.10
	img.dyn=/usr/bin
	img.gslib=/usr/bin
	img.exe=${img.dyn}/convert
	img.config=${img.root}/config-Q16HDRI
	img.coders=${img.root}/modules-Q16HDRI/coders


  # Now that we have installed the imagemagic, let's do a round of test to make sure execuatables are working as expected

    # Post installation use this command to make sure imagemagic's 'covert' command is working: 
      
      /usr/bin/convert test.png test.jpg


################################# Installing Imagemagick 7.0.10 [End] ################################################


################################# Installing Imagemagick LibreOffice_6.3.5.x [Start] #################################

    # Download locations:
   
    https://downloadarchive.documentfoundation.org/libreoffice/old/6.3.5.2/rpm/x86_64/LibreOffice_6.3.5.2_Linux_x86-64_rpm.tar.gz
    
    # Can also be downloaded from here:
    https://nexus.alfresco.com/nexus/service/local/repositories/thirdparty/content/org/libreoffice/libreoffice-dist/6.3.5/libreoffice-dist-6.3.5-linux.gz

    # Download above packages and run following commands to install

    # Use rpm files path as per your current download location. In my case files are downloaded in 'Downloads' folder.
    $ sudo yum localinstall ./Downloads/LibreOffice_6.3.5.2_Linux_x86-64_rpm/RPMS/*.rpm -y

    # LibreOffice and its dependencies will be installed and can be found in these locations:

    /opt/libreoffice6.3

    # LibreOffice configuration based on above locations for alfresco would be:

	ooo.exe=/opt/libreoffice6.3/program/soffice.bin
	ooo.enabled=false
	ooo.port=8100
	jodconverter.enabled=true
	jodconverter.officeHome=/opt/libreoffice6.3
	jodconverter.portNumbers=8100


################################# Installing Imagemagick LibreOffice_6.3.5.x [End] #################################


################################# Installing ActiveMQ 5.15.8 [Start] ###############################################

  # Download locations:
  
    https://archive.apache.org/dist/activemq/5.15.8/apache-activemq-5.15.8-bin.tar.gz

 # (We created the directory structure in first step)
 # Extract the package and copy content of apache-activemq-5.15.8-bin into '/usr/local/alfresco-community62ga/activemq'

Note: Make sure ports 61616, 5672, 61613, 1883, 61614 and 8161 are open and not in use already. These are default ports used for activemq. If you have these ports already in use, make sure you change the ports accordingly in <AMQ_INSTALLATION>/conf/activemq.xml and jetty.xml as needed.
Note that activemq may not be used at this time as we will be setting up with legacy transformation service but keeping the message broker setup ready for future use in case you would like to setup transformation service. However, we will see all the steps to setup and use the activemq below, If you do these steps and not using activeMq, then disable the service and ports. Enable them back when you are ready to use transformation services.

 # We will create a system service for activemq

   $ sudo vim /etc/systemd/system/activemq.service
   
   # Put the below instructions in activemq.service and save

        [Unit]
	Description=ActiveMQ service
	After=network.target

	[Service]
	Type=forking
	ExecStart=/usr/local/alfresco-community62ga/activemq/bin/activemq start
	ExecStop=/usr/local/alfresco-community62ga/activemq/bin/activemq stop
	User=root
	Group=root
	Restart=always
	RestartSec=9
	StandardOutput=syslog
	StandardError=syslog
	SyslogIdentifier=activemq

	[Install]
	WantedBy=multi-user.target

   # You can start ActiveMQ using:

   $ sudo systemctl start activemq

   # To configure ActiveMQ to automatically start at boot time, use.

   $ sudo systemctl enable activemq

   # To check if ActiveMQ service is started correctly, you can run the following command to check the status of the ActiveMQ service.

   $ sudo systemctl status activemq

   # We will open following ports: 
     - 8161 --> for Web Console
     - 5672 --> for AMQP
     - 61616 --> for OpenWire
     - 61613 --> for STOMP

   $ sudo firewall-cmd --zone=public --permanent --add-port=8161/tcp
   $ sudo firewall-cmd --zone=public --permanent --add-port=5672/tcp
   $ sudo firewall-cmd --zone=public --permanent --add-port=61616/tcp
   $ sudo firewall-cmd --zone=public --permanent --add-port=61613/tcp
   $ sudo firewall-cmd --reload

  # Test the web console 
    http://localhost:8161/admin

  # Now that everything setup and working, i will disable the service and disable the ports i opened above as for this setup i am not using transformation services.

################################# Installing ActiveMQ 5.15.8 [End] ###################################


################################# Installing Tomcat 8.5.61 [Start] ###################################

  # Download locations:
  
    https://mirrors.gigenet.com/apache/tomcat/tomcat-8/v8.5.61/bin/apache-tomcat-8.5.61.tar.gz

################################# Installing Tomcat 8.5.61 [End] #####################################



































